<?php

/**
  * Implements hook_menu()
  */
function bird_taxonomies_menu() {
  $items = array();
  $items['bird_taxonomies/ajax/species/%'] = array(
    'page callback' => 'bird_taxonomies_get_species_ajax_callback',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['bird_taxonomies/ajax/subspecies/%'] = array(
    'page callback' => 'bird_taxonomies_get_subspecies_ajax_callback',
    'page arguments' => array(3),
    'access arguments' => array('access content'),    
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
  * Implements hook_taxonomies_block_info()
  */
function bird_taxonomies_block_info() {
  $blocks['bird_orders'] = array(
    'info' => t('Bird Orders'), 
  );
  
  return $blocks;
}

/**
  * Implements hook_taxonomies_block_view()
  */
function bird_taxonomies_block_view($delta = '') {
  // This example is adapted from node.module.
  $block = array();
    
  switch ($delta) {
    case 'bird_orders':
      $block['subject'] = t('Bird Orders');
      $block['content'] = array(
        '#orders' => bird_taxonomies_bird_orders(), 
        '#theme' => 'bird_taxonomies_bird_orders',
      );
      break;
  }
  return $block;
}

/**
  * Implements hook_theme()
  */
function bird_taxonomies_theme($existing, $type, $theme, $path) {
  return array(
    'bird_taxonomies_bird_orders' => array(
      'variables' => array('orders' => NULL,
    )), 
    'bird_taxonomies_bird_species' => array(
      'variables' => array('species' => NULL,
    )), 
    'bird_taxonomies_bird_subspecies' => array(
      'variables' => array('subspecies' => NULL,
    )), 
  );
}

function bird_taxonomies_bird_orders() {
  
  $result = db_query("SELECT node.title AS node_title, node.nid AS nid
                      FROM 
                      node node, field_data_field_ord_ordenacion ord
                      WHERE (( (node.status = '1') AND (node.nid = ord.entity_id) AND (node.type IN  ('order')) ))
                      ORDER BY ord.field_ord_ordenacion_value ASC");
  
  $orders = array();
  
  $families = bird_taxonomies_get_families();
  
  //dsm($families);
  
  if(!empty($families)) {
    foreach ($result as $record) {
      if(!empty($families[$record->nid])) {
        $orders[] = array( 'data' => '<span class="a-wrapper clearfix">'.l($record->node_title,'node/'.$record->nid).'<span class="go"><span>-></span></span></span>' . theme('item_list', array('items' => $families[$record->nid], 'attributes' => array ('class' => 'families'))),
        'class' => array('class' => (arg(1) == $record->nid) ? 'active selected' : ''));
      }
    }
  }
        
  return $orders;
}

function bird_taxonomies_get_families($order = NULL) {

  $result = db_query("SELECT node.title AS node_title, node.nid AS nid, node_field_data_field_fam_order.nid AS node_field_data_field_fam_order_nid, node.created AS node_created, 'node' AS field_data_field_fam_order_ibc_node_entity_type
FROM 
{node} node
LEFT JOIN {field_data_field_fam_order} field_data_field_fam_order ON node.nid = field_data_field_fam_order.entity_id AND (field_data_field_fam_order.entity_type = 'node' AND field_data_field_fam_order.deleted = '0')
LEFT JOIN {node} node_field_data_field_fam_order ON field_data_field_fam_order.field_fam_order_nid = node_field_data_field_fam_order.nid
LEFT JOIN {field_data_field_fam_ordenacio} field_data_field_fam_ordenacio ON node.nid = field_data_field_fam_ordenacio.entity_id
WHERE (( (node.status = '1') AND (node.type IN  ('family')) ))
ORDER BY field_data_field_fam_ordenacio.field_fam_ordenacio_value ASC");
  
  $families = array();
  
  if(get_global_filter_countries()) {
    $species = bird_taxonomies_get_species_family_group();
    foreach ($result as $record) {
      if(!empty($species[$record->nid])) {
        $families[$record->node_field_data_field_fam_order_nid][$record->nid] = array( 'data' => '<span class="a-wrapper clearfix">'.l($record->node_title,'node/'.$record->nid) . '<span class="go"><span>-></span></span></span>', 'id' => 'id-' . $record->nid);  
      }
    }
  }
  else {  
    foreach ($result as $record) {
        $families[$record->node_field_data_field_fam_order_nid][$record->nid] = array( 'data' => '<span class="a-wrapper clearfix">'.l($record->node_title,'node/'.$record->nid) . '<span class="go"><span>-></span></span></span>', 'id' => 'id-' . $record->nid);        
    }
  }
      
  return $families;
}

function bird_taxonomies_get_species_ajax_callback($family = NULL) {  

  $species = bird_taxonomies_get_species($family);
      
  print theme('bird_taxonomies_bird_species',array('species' => $species));
  exit();
}

function bird_taxonomies_get_species($family = NULL) {  
      
    $query = "SELECT distinct(node.title) AS node_title, node.nid AS nid
FROM 
{node} node
LEFT JOIN {field_data_field_sp_family_nr} field_data_field_sp_family_nr ON node.nid = field_data_field_sp_family_nr.entity_id AND (field_data_field_sp_family_nr.entity_type = 'node' AND field_data_field_sp_family_nr.deleted = '0')
LEFT JOIN {node} node_field_data_field_sp_family_nr ON field_data_field_sp_family_nr.field_sp_family_nr_nid = node_field_data_field_sp_family_nr.nid";

  if($countries_filter = get_global_filter_countries()) {
    $query .= " INNER JOIN bird_countries ON node.nid = bird_countries.nid_hbw AND bird_countries.tid_hbw IN ($countries_filter)";
  }
  
  $query .= " WHERE (( (node.status = '1') AND (node.type IN  ('species'))";
  
  if($family) {
    $query .= "AND (node_field_data_field_sp_family_nr.nid = :family )";
  }  
  
    
  $query .= " )) ORDER BY node_title DESC";

  //dsm($query);
  
  if($family) {
    $result = db_query($query,array(':family' => $family));
  }
  else {
    $result = db_query($query);
  }
        
  $species = array();
  
  foreach ($result as $record) {
      $species[] = $record;
  }
      
  return $species;
}

function bird_taxonomies_get_species_family_group() {
  
    $query = "SELECT node.title AS node_title, node.nid AS nid, field_data_field_sp_family_nr.field_sp_family_nr_nid AS family_nid
FROM 
{node} node
LEFT JOIN {field_data_field_sp_family_nr} field_data_field_sp_family_nr ON node.nid = field_data_field_sp_family_nr.entity_id AND (field_data_field_sp_family_nr.entity_type = 'node' AND field_data_field_sp_family_nr.deleted = '0')
LEFT JOIN {node} node_field_data_field_sp_family_nr ON field_data_field_sp_family_nr.field_sp_family_nr_nid = node_field_data_field_sp_family_nr.nid";

  if($countries_filter = get_global_filter_countries()) {
    $query .= " INNER JOIN bird_countries ON node.nid = bird_countries.nid_hbw AND bird_countries.tid_hbw IN ($countries_filter)";
  }
  
  $query .= " WHERE (( (node.status = '1') AND (node.type IN  ('species'))";
  
    
  $query .= " )) ORDER BY node_title DESC";

  //dsm($query);
  
  $result = db_query($query);
        
  $species = array();
  
  foreach ($result as $record) {
    // Do something with each $record
    //dsm($record);
    /*$species[$record->node_field_data_field_fam_order_nid ][$record->nid] = array( 'data' => l($record->node_title,'node/'.$record->nid),
      'class' => array('families'));
      */
      $species[$record->family_nid][$record->nid] = $record;
  }
      
  return $species;
}

function bird_taxonomies_get_subspecies_ajax_callback($specie = NULL) {

  $result = db_query("SELECT node.title AS node_title, node.nid AS nid, node.created AS node_created
FROM 
{node} node
LEFT JOIN {field_data_field_ssp_species} field_data_field_ssp_species ON node.nid = field_data_field_ssp_species.entity_id AND (field_data_field_ssp_species.entity_type = 'node' AND field_data_field_ssp_species.deleted = '0')
LEFT JOIN {node} node_field_data_field_ssp_species ON field_data_field_ssp_species.field_ssp_species_nid = node_field_data_field_ssp_species.nid
WHERE (( (node.status = '1') AND (node.type IN  ('subspecies')) AND (node_field_data_field_ssp_species.nid = :specie) ))
ORDER BY node_title DESC",array(':specie' => $specie));
    
  foreach ($result as $record) {
    // Do something with each $record
    //dsm($record);
    /*$species[$record->node_field_data_field_fam_order_nid ][$record->nid] = array( 'data' => l($record->node_title,'node/'.$record->nid),
      'class' => array('families'));
      */
      $subspecies[] = $record;
  }
          
  print theme('bird_taxonomies_bird_subspecies',array('subspecies' => $subspecies));
  exit();
}

/** Abre o cierra el menu segun donde estemos **/
function bird_taxonomies_menu_state() {
  
}

function theme_bird_taxonomies_bird_orders($variables) {
  $orders = $variables['orders'];
    
  $output = theme('item_list', array('items' => $orders, 'attributes' => array ('class' => 'orders')));
    
  return $output;  
}

function theme_bird_taxonomies_bird_species($variables) {
  $species = $variables['species'];

  if(!empty($species)) {
    foreach($species as $specie) {
      $items[] = array( 'data' => '<span class="a-wrapper clearfix">'.l(_hba_cursive($specie->node_title),'node/'.$specie->nid,array('html' => true)).'<span class="go"><span>-></span></span></span>', 'id' => 'id-' . $specie->nid);
    }
  }
  else {
    $items[] = array( 'data' => '<span class="a-wrapper clearfix">'. t('No species with the filter') . '</span>');

  }
    
  $output = theme('item_list', array('items' => $items, 'attributes' => array ('class' => 'species')));
    
  return $output;  
}

function theme_bird_taxonomies_bird_subspecies($variables) {
  $subspecies = $variables['subspecies'];
    
  foreach($subspecies as $subspecie) {
    $items[] = '<span class="a-wrapper clearfix">'.l($subspecie->node_title,'node/'.$subspecie->nid).'<span class="go"><span>-></span></span></span>';
  }
    
  $output = theme('item_list', array('items' => $items, 'attributes' => array ('class' => 'subspecies')));
    
  return $output;  
}

function get_global_filter_countries_select() {
    $countries = array();
    $country_filter = '';
    
    if(!empty($_SESSION['global_filter']['view_taxo_paisos'])) {
      $country_filter = "SELECT distinct(bd.nid_hbw) FROM bird_countries as bd WHERE ";
      
      $country_filter .= 'bd.tid_hbw = ' . implode(' OR bd.tid_hbw = ', $_SESSION['global_filter']['view_taxo_paisos']);

    }
    else {
      $country_filter = false;
    }
    
    //dsm($country_filter);
    
    return $country_filter;
}

function get_global_filter_countries() {
    $country_filter = '';

    if(!empty($_SESSION['global_filter']['view_taxo_paisos'])) {    
      foreach($_SESSION['global_filter']['view_taxo_paisos'] as $country) {
        $continents = bird_taxonomies_continents();
        
        if(isset($continents[$country])) {
          $country_filter .= implode(', ',$continents[$country]['countries']) . ', ';
        }
        else {
          $country_filter .= $country . ', ';
        }
      }  
      // Si el ultimo elemento tiene una coma se la quitamos
      $country_filter= trim($country_filter);
      if(substr($country_filter, strlen($country_filter)-1,1) == ',') {
        $country_filter = substr($country_filter, 0, strlen($country_filter)-1);
      }
    }
    else {
      $country_filter = false;
    }
        
    return $country_filter;
}



function bird_taxonomies_views_query_alter(&$view, &$query) {
  // (Example assuming a view with an exposed filter on node title.)
  // If the input for the title filter is a positive integer, filter against
  // node ID instead of node title.
  if ($view->name == 'species_table_by_family') {
    
    // Miramos si se ha de filtrar por paises
    $country_filter = get_global_filter_countries_select();
    
    if(!empty($country_filter)) {     
      //$view->header[]
          
      $result = db_query($country_filter);
            
      $nids = array();
      foreach ($result as $record) {
          $nids[] = $record->nid_hbw;
      }
           
      $view->query->where[] = 
            array( 'type' => 'AND',
                   'conditions' => array( 0 => array( 'field'    => 'node.nid',
                                                      'operator' => 'in',
                                                      'value'    => $nids, 
                                                    ),
                                        ),
                   'args' => array(),
                 );
    }
  } // species_table_by_family
  
  
  // filtrem les views de species list a la pag de familia i la pagina my-list
  if (($view->name == 'taxo_tree3')  || ($view->name == 'my_list')){
    // Miramos si se ha de filtrar por paises
    $country_filter = get_global_filter_countries_select();
   
    if(!empty($country_filter)) {     
          
      $result = db_query($country_filter);
     
      $nids = array();
      foreach ($result as $record) {
          $nids[] = $record->nid_hbw;
      }

      $view->query->where[] = 
            array( 'type' => 'AND',
                   'conditions' => array( 0 => array( 'field'    => 'field_sp_family_nr_node.nid',
                                                      'operator' => 'in',
                                                      'value'    => $nids, 
                                                    ),
                                        ),
                   'args' => array(),
                 );

    } 
  }  // taxo-tree3  &  my_list
  
  // filtro de countries por paises, si hay algunos selecionados..
  if ($view->name == 'galley_fluid'){
    
    if(isset($view->exposed_raw_input['image_style'])) {
      $view->field['field_figure_img']->options['settings']['image_style'] = $view->exposed_raw_input['image_style'];
    }
    
    $country_filter = get_global_filter_countries_select();
   
    if(!empty($country_filter)) {     
          
      $result = db_query($country_filter);
     
      $nids = array();
      foreach ($result as $record) {
          $nids[] = $record->nid_hbw;
      }
      $view->query->where[] = 
            array( 'type' => 'AND',
                   'conditions' => array( 0 => array( 'field'    => 'field_data_field_figure_sp.field_figure_sp_nid',
                                                      'operator' => 'in',
                                                      'value'    => $nids, 
                                                    ),
                                        ),
                   'args' => array(),
                 );

    } 
  }  // galley_fluid - plates filtrads!
  
} // views_query_alter


function bird_taxonomies_form_global_filter_1_alter(&$form, &$form_state, $form_id) {
  $tabla_continents = bird_taxonomies_continents();

  $continentes = array();
  foreach($tabla_continents as $key => $continent) {
    $continentes[$key] = $continent['name'];
  }; 
  
  //dsm($continentes);
  
  //comento la siguiente linia porque daba este error al mostrar, por ejemplo, esta URL: 
  //http://hbw/biblio/duplicats/search?field_bib_author_value_op=%3D&field_bib_author_value=&field_bib_author_value_1_op=%3D&field_bib_author_value_1=&field_bib_year_value_op=%3D&field_bib_year_value[value]=&field_bib_year_value[min]=&field_bib_year_value[max]=&field_bib_ref_name_value_op=%3D&field_bib_ref_name_value=&field_bib_hbw_volume_value=&items_per_page=10&page=29
  //Error que daba: Fatal error: Unsupported operand types in /var/www/hbw/sites/all/modules/bird_taxonomies/bird_taxonomies.module on line 419
  //$form['view_taxo_paisos']['#options'] = $continentes + $form['view_taxo_paisos']['#options'];

  //dsm($form['view_taxo_paisos']['#options']);
  
  //array_unshift(, $form['view_taxo_paisos']['#options']);

}

function bird_taxonomies_continent_to_country($continent) {
  $tabla_continents = bird_taxonomies_continents();
}

function bird_taxonomies_continents() {
  $tabla_continents = array( '1' => array('name'       => t('Europe'),
                                           'countries' => array(4326, 4310, 4345, 4323)),
                             '2' => array('name'       => t('Africa'),
                                           'countries' => array(4326, 4310, 4345, 4323)),
                             '3' => array('name'       => t('America'),
                                           'countries' => array(4326, 4310, 4345, 4323)),
                            
                           );
  return $tabla_continents;
}

function bird_taxonomies_form_alter(&$form, &$form_state, $form_id) {
  /*if($form_id == 'views_exposed_form') {
    $form['style'] = array( '#type'    => 'select',
                             '#options' => bird_taxonomies_plates_styles(),
                           );
    //dsm($form);
  }*/
}

function bird_taxonomies_plates_styles() {
 return array( 'plate_10' => t('Small'), 
               'plate_20' => t('Medium'), 
               'plate_30' => t('Large'), 
               'plate_40' => t('Extra Large'),
             );
}

/**
 * Implentation of HOO_views_api()
 *
 * @return array An associative array of views options.
 */
function bird_taxonomies_views_api() {
  $array =  array(
   'api' => 3,
   'path' => drupal_get_path('module', 'bird_taxonomies') . '/views',
  );
    
  return $array;
}